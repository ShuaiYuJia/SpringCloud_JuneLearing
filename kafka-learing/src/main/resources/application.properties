# 应用名称
spring.application.name=springboot-kafka-02
# 应用服务 WEB 访问端口
server.port=8080


# kafka配置
# kafka地址
spring.kafka.bootstrap-servers=localhost:9092


#kafka内部发送和接收消息的时候，使用的是byte[]字节数组的方式(RPC底层也是用这种通讯格式)。
# 但是我们在应用层其实可以使用更多的数据类型，比如int，short，long，String等，
# 这归功于kafka的序列化和反序列化机制。

# producer 序列化配置
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.IntegerSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# 生产者发送消息按照批次发送，设置一个批次可以发布多少条消息
spring.kafka.producer.batch-size=16384

# 生产者一端总的可用的发送缓冲区大小，此处设置为32MB，此处单位为byte
spring.kafka.producer.buffer-memory=33554432



# consumer配置
# consumer 反序列化配置
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer


# 配置消费者组id
spring.kafka.consumer.group-id=springboot-consumer02

# 如果在kafka中找不到当前消费者的偏移量，则直接将偏移量设为最早的
spring.kafka.consumer.auto-offset-reset=earliest
# 消费者的偏移量是自动提交还是手动提交，此处设置自动提交偏移量
spring.kafka.consumer.enable-auto-commit=true
# 消费者偏移量自动提交时间间隔
spring.kafka.consumer.auto-commit-interval=1000





